class NumArray {
public:
    vector<int>tree, arr;
    int n;
    void build(int st, int en, int nd){
        if(st==en){
            tree[nd]=arr[st];
            return;
        }
        build(st, (st+en)/2, nd+nd);
        build( (st+en)/2+1, en, nd+nd+1);
        tree[nd] = tree[nd+nd] + tree[nd+nd+1];
    }
    NumArray(vector<int>& nums) {
        n = nums.size();
        arr = nums;
        tree.resize(4*n);
        build(0, n-1 , 1);
    }
    
    void uupdate(int st, int en , int nd, int idx, int value){
        if(idx<st || idx>en) return;
        if(st==idx && en==idx){
            tree[nd]=value;
            return;
        }
        uupdate(st, (st+en)/2, nd+nd, idx, value);
        uupdate((st+en)/2+1, en, nd+nd+1, idx, value);
        tree[nd] = tree[nd+nd] + tree[nd+nd+1];
    }
    
    int query(int st, int en, int nd, int L, int R){
        if(R<st || L>en) return 0;
        if(L<=st && R>=en) return tree[nd];
        return query(st, (st+en)/2, nd+nd, L, R)+query((st+en)/2+1, en, nd+nd+1, L, R);
    }
    int sumRange(int l, int r)
    {
        return query(0, n-1, 1, l, r);
    }
    void update(int idx, int value){
        uupdate(0, n-1, 1, idx, value);
    }

};
